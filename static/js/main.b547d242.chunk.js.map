{"version":3,"sources":["data.js","App.js","serviceWorker.js","index.js"],"names":["data","error","resolution","App","state","compareA","compareB","comparisonResult","getA","getResult","handleInputChnage","name","event","setState","target","value","compare","similarity","distance","Math","floor","findResolution","maxmatch","found","map","errorRecord","className","onInput","this","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"kQAAaA,EAAO,CAClB,CACEC,MAAM,0wBAQNC,WAAY,4BAEd,CACED,MAAM,0wBAQNC,WAAY,gCAEd,CACED,MAAM,0wBAQNC,WAAY,iBAEd,CACED,MAAM,0wBAQNC,WAAY,oCCuCDC,E,4MA5EbC,MAAQ,CACNC,SAAU,GACVC,SAAU,GACVC,iBAAkB,EAClBC,KAAM,GACNC,UAAW,I,EAGbC,kBAAoB,SAACC,GAAD,OAAU,SAACC,GAC7B,EAAKC,SAAL,eACGF,EAAOC,EAAME,OAAOC,U,EAIzBC,QAAU,WACR,IAAIC,EAAaC,EAAS,EAAKd,MAAMC,SAAU,EAAKD,MAAME,UAC1D,EAAKO,SAAS,CACZN,iBAAkBY,KAAKC,MAAmB,IAAbH,M,EAIjCI,eAAiB,WACf,IAAInB,EAAa,+CACboB,EAAW,EACXC,GAAQ,EAEZvB,EAAKwB,KAAI,SAACC,GACR,IAAIR,EAAaC,EAAS,EAAKd,MAAMI,KAAMiB,EAAYxB,OAOvD,OALIqB,EAAWL,GAAcA,EAAa,KACxCK,EAAWL,EACXf,EAAauB,EAAYvB,WACzBqB,GAAQ,GAEH,QAGT,EAAKV,SAAS,CACZJ,UAAU,aAAD,OAAeP,EAAf,sBAAuCqB,EAAQJ,KAAKC,MAAe,IAATE,GAAgB,U,uDAKrF,OACE,yBAAKI,UAAU,aACb,yBAAKA,UAAU,SAAf,sCACA,yBAAKA,UAAU,wBACb,8BACEC,QAASC,KAAKlB,kBAAkB,YAChCgB,UAAU,UAEZ,8BACEC,QAASC,KAAKlB,kBAAkB,YAChCgB,UAAU,UAEZ,4BAAQG,QAASD,KAAKZ,QAASU,UAAU,OAAzC,WAGA,yBAAKA,UAAU,UAAf,aAAmCE,KAAKxB,MAAMG,mBAEhD,yBAAKmB,UAAU,YACf,yBAAKA,UAAU,wBACb,8BACEC,QAASC,KAAKlB,kBAAkB,QAChCgB,UAAU,UAEZ,4BAAQG,QAASD,KAAKP,eAAgBK,UAAU,OAAhD,eAGA,yBAAKA,UAAU,UAAUE,KAAKxB,MAAMK,iB,GAtE5BqB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9C,GACL+C,QAAQ/C,MAAMA,EAAMgD,a","file":"static/js/main.b547d242.chunk.js","sourcesContent":["export const data = [\r\n  {\r\n    error: `Message               : Duplicate entry '6dad0a2b-173b-43e8-b41c-eb314456c927' for key 'PRIMARY'.\r\n    Element               : postInspectionFlow/processors/3 @ dota-qmp-sys-api-dev:post-inspection.xml:19 (QMP-T-Inspection)\r\n    Element XML           : <db:insert doc:name=\"QMP-T-Inspection\" doc:id=\"1303d030-9a1a-4045-aa27-a630e09b6d6a\" config-ref=\"MySQL_Database_Config_QMP\">\r\n                            <db:sql>{file::sql/insert-qmp-inspection-result.sql}</db:sql>\r\n                            <db:input-parameters>#[vars.varQmpInspectionResultParams]</db:input-parameters>\r\n                            </db:insert>\r\n    Error type            : DB:QUERY_EXECUTION\r\n    Payload Type          : org.mule.runtime.core.internal.streaming.bytes.ManagedCursorStreamProvider`,\r\n    resolution: '42 is the answer to life',\r\n  },\r\n  {\r\n    error: `Message               : Duplicate entry '342d18cf-a276-446d-a8df-10e1ee0dce4b' for key 'PRIMARY'.\r\n    Element               : postInspectionFlow/processors/3 @ dota-qmp-sys-api-dev:post-inspection.xml:19 (QMP-T-Inspection)\r\n    Element XML           : <db:insert doc:name=\"QMP-T-Inspection\" doc:id=\"1303d030-9a1a-4045-aa27-a630e09b6d6a\" config-ref=\"MySQL_Database_Config_QMP\">\r\n                            <db:sql>{file::sql/insert-qmp-inspection-result.sql}</db:sql>\r\n                            <db:input-parameters>#[vars.varQmpInspectionResultParams]</db:input-parameters>\r\n                            </db:insert>\r\n    Error type            : DB:QUERY_EXECUTION\r\n    Payload Type          : org.mule.runtime.core.internal.streaming.bytes.ManagedCursorStreamProvider`,\r\n    resolution: 'dont worry, Everything is ok',\r\n  },\r\n  {\r\n    error: `Message               : Duplicate entry '6dad0a2b-173b-43e8-b41c-eb314456c927' for key 'PRIMARY'.\r\n    Element               : postInspectionFlow/processors/3 @ dota-qmp-sys-api-dev:post-inspection.xml:19 (QMP-T-Inspection)\r\n    Element XML           : <db:insert doc:name=\"QMP-T-Inspection\" doc:id=\"1303d030-9a1a-4045-aa27-a630e09b6d6a\" config-ref=\"MySQL_Database_Config_QMP\">\r\n                            <db:sql>{file::sql/insert-qmp-inspection-result.sql}</db:sql>\r\n                            <db:input-parameters>#[vars.varQmpInspectionResultParams]</db:input-parameters>\r\n                            </db:insert>\r\n    Error type            : DB:QUERY_EXECUTION\r\n    Payload Type          : org.mule.runtime.core.internal.streaming.bytes.ManagedCursorStreamProvider`,\r\n    resolution: 'Change 3 to 4',\r\n  },\r\n  {\r\n    error: `Message               : Duplicate entry '6dad0a2b-173b-43e8-b41c-eb314456c927' for key 'PRIMARY'.\r\n    Element               : postInspectionFlow/processors/3 @ dota-qmp-sys-api-dev:post-inspection.xml:19 (QMP-T-Inspection)\r\n    Element XML           : <db:insert doc:name=\"QMP-T-Inspection\" doc:id=\"1303d030-9a1a-4045-aa27-a630e09b6d6a\" config-ref=\"MySQL_Database_Config_QMP\">\r\n                            <db:sql>{file::sql/insert-qmp-inspection-result.sql}</db:sql>\r\n                            <db:input-parameters>#[vars.varQmpInspectionResultParams]</db:input-parameters>\r\n                            </db:insert>\r\n    Error type            : DB:QUERY_EXECUTION\r\n    Payload Type          : org.mule.runtime.core.internal.streaming.bytes.ManagedCursorStreamProvider`,\r\n    resolution: 'This error is just to scare you',\r\n  },\r\n]","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport * as distance from \"jaro-winkler\";\nimport { data } from \"./data\";\n\nclass App extends Component {\n  state = {\n    compareA: \"\",\n    compareB: \"\",\n    comparisonResult: 0,\n    getA: \"\",\n    getResult: \"\",\n  };\n\n  handleInputChnage = (name) => (event) => {\n    this.setState({\n      [name]: event.target.value,\n    });\n  };\n\n  compare = () => {\n    let similarity = distance(this.state.compareA, this.state.compareB);\n    this.setState({\n      comparisonResult: Math.floor(similarity * 100),\n    });\n  };\n\n  findResolution = () => {\n    let resolution = \"Sorry!! There is no resolution to this error\";\n    let maxmatch = 0;\n    let found = false\n\n    data.map((errorRecord) => {\n      let similarity = distance(this.state.getA, errorRecord.error);\n\n      if (maxmatch < similarity && similarity > 0.90) {\n        maxmatch = similarity\n        resolution = errorRecord.resolution;\n        found = true\n      }\n      return null;\n    });\n\n    this.setState({\n      getResult: `Solution: ${resolution}. Match %: ${found ? Math.floor(maxmatch*100) : 'N/A'}`,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"title\">Text Comparison using Jaro Winkler</div>\n        <div className=\"comparison-container\">\n          <textarea\n            onInput={this.handleInputChnage(\"compareA\")}\n            className=\"input\"\n          />\n          <textarea\n            onInput={this.handleInputChnage(\"compareB\")}\n            className=\"input\"\n          />\n          <button onClick={this.compare} className=\"btn\">\n            Compare\n          </button>\n          <div className=\"result\">Match % - {this.state.comparisonResult}</div>\n        </div>\n        <div className=\"divider\"></div>\n        <div className=\"resolution-container\">\n          <textarea\n            onInput={this.handleInputChnage(\"getA\")}\n            className=\"input\"\n          />\n          <button onClick={this.findResolution} className=\"btn\">\n            Resolution?\n          </button>\n          <div className=\"result\">{this.state.getResult}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}